// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscoveryClient is the client API for Discovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoveryClient interface {
	// client posts connection info to server, reads returned stream to get
	// connection info of second client
	PostConnectionInfo(ctx context.Context, in *ConnectionInfo, opts ...grpc.CallOption) (Discovery_PostConnectionInfoClient, error)
	// RPC to get the webRTC information of the host, used to craft
	// peer response
	GetConnectionInfoForToken(ctx context.Context, in *ConnectionToken, opts ...grpc.CallOption) (*ConnectionInfo, error)
	// RPC to send peer response to host, allowing both ends
	// to initiate a peer-to-peer connection
	JoinConversation(ctx context.Context, in *ConnectionInfo, opts ...grpc.CallOption) (*Empty, error)
}

type discoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryClient(cc grpc.ClientConnInterface) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) PostConnectionInfo(ctx context.Context, in *ConnectionInfo, opts ...grpc.CallOption) (Discovery_PostConnectionInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Discovery_ServiceDesc.Streams[0], "/Discovery/PostConnectionInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryPostConnectionInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Discovery_PostConnectionInfoClient interface {
	Recv() (*ConnectionInfo, error)
	grpc.ClientStream
}

type discoveryPostConnectionInfoClient struct {
	grpc.ClientStream
}

func (x *discoveryPostConnectionInfoClient) Recv() (*ConnectionInfo, error) {
	m := new(ConnectionInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *discoveryClient) GetConnectionInfoForToken(ctx context.Context, in *ConnectionToken, opts ...grpc.CallOption) (*ConnectionInfo, error) {
	out := new(ConnectionInfo)
	err := c.cc.Invoke(ctx, "/Discovery/GetConnectionInfoForToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) JoinConversation(ctx context.Context, in *ConnectionInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Discovery/JoinConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryServer is the server API for Discovery service.
// All implementations must embed UnimplementedDiscoveryServer
// for forward compatibility
type DiscoveryServer interface {
	// client posts connection info to server, reads returned stream to get
	// connection info of second client
	PostConnectionInfo(*ConnectionInfo, Discovery_PostConnectionInfoServer) error
	// RPC to get the webRTC information of the host, used to craft
	// peer response
	GetConnectionInfoForToken(context.Context, *ConnectionToken) (*ConnectionInfo, error)
	// RPC to send peer response to host, allowing both ends
	// to initiate a peer-to-peer connection
	JoinConversation(context.Context, *ConnectionInfo) (*Empty, error)
	mustEmbedUnimplementedDiscoveryServer()
}

// UnimplementedDiscoveryServer must be embedded to have forward compatible implementations.
type UnimplementedDiscoveryServer struct {
}

func (UnimplementedDiscoveryServer) PostConnectionInfo(*ConnectionInfo, Discovery_PostConnectionInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method PostConnectionInfo not implemented")
}
func (UnimplementedDiscoveryServer) GetConnectionInfoForToken(context.Context, *ConnectionToken) (*ConnectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionInfoForToken not implemented")
}
func (UnimplementedDiscoveryServer) JoinConversation(context.Context, *ConnectionInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinConversation not implemented")
}
func (UnimplementedDiscoveryServer) mustEmbedUnimplementedDiscoveryServer() {}

// UnsafeDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoveryServer will
// result in compilation errors.
type UnsafeDiscoveryServer interface {
	mustEmbedUnimplementedDiscoveryServer()
}

func RegisterDiscoveryServer(s grpc.ServiceRegistrar, srv DiscoveryServer) {
	s.RegisterService(&Discovery_ServiceDesc, srv)
}

func _Discovery_PostConnectionInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectionInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiscoveryServer).PostConnectionInfo(m, &discoveryPostConnectionInfoServer{stream})
}

type Discovery_PostConnectionInfoServer interface {
	Send(*ConnectionInfo) error
	grpc.ServerStream
}

type discoveryPostConnectionInfoServer struct {
	grpc.ServerStream
}

func (x *discoveryPostConnectionInfoServer) Send(m *ConnectionInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Discovery_GetConnectionInfoForToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).GetConnectionInfoForToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Discovery/GetConnectionInfoForToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).GetConnectionInfoForToken(ctx, req.(*ConnectionToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_JoinConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).JoinConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Discovery/JoinConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).JoinConversation(ctx, req.(*ConnectionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Discovery_ServiceDesc is the grpc.ServiceDesc for Discovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Discovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnectionInfoForToken",
			Handler:    _Discovery_GetConnectionInfoForToken_Handler,
		},
		{
			MethodName: "JoinConversation",
			Handler:    _Discovery_JoinConversation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PostConnectionInfo",
			Handler:       _Discovery_PostConnectionInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
